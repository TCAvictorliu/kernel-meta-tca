From 585b216048bf4e3d0a31f5e01c795568360f9c35 Mon Sep 17 00:00:00 2001
From: "andy.huang" <andy.huang@thales-cetca.com>
Date: Fri, 2 Aug 2019 17:46:11 +0800
Subject: [PATCH 51/51] update the penmount-i2c driver to fix button no
 responce

---
 drivers/input/touchscreen/penmount-i2c.c | 261 +++++++++++++++++++++----------
 1 file changed, 176 insertions(+), 85 deletions(-)

diff --git a/drivers/input/touchscreen/penmount-i2c.c b/drivers/input/touchscreen/penmount-i2c.c
index e12d6a7..c79c902 100644
--- a/drivers/input/touchscreen/penmount-i2c.c
+++ b/drivers/input/touchscreen/penmount-i2c.c
@@ -1,7 +1,7 @@
 /*
  *  I2C driver for PenMount touchscreens
  *
- *  Copyright (c) 2017 John Sung <penmount <at> seed.net.tw>
+ *  Copyright (c) 2019 John Sung <penmount <at> seed.net.tw>
  *
  */
 
@@ -71,12 +71,14 @@
 //------------------------------------------------------
 #ifndef PMDRIVER_MAJORVER
 #define PMDRIVER_MAJORVER 1
-#define PMDRIVER_MINORVER 15
-#define PMDRIVER_BUILDVER 4
+#define PMDRIVER_MINORVER 18
+#define PMDRIVER_BUILDVER 0
 #define PMDRIVER_REVISION 1
-#define PMDRIVER_VERSION  ((PMDRIVER_MAJORVER<<8)|(PMDRIVER_MINORVER<<4)|PMDRIVER_BUILDVER)
+#define PMDRIVER_VERSION  ((PMDRIVER_MAJORVER<<12)|(PMDRIVER_MINORVER<<4)|PMDRIVER_BUILDVER)
 #endif
 //------------------------------------------------------
+#define IS_TOUCH_DATATAG(tag) (((tag & PENMOUNT_P2_TOUCHFLAG_MASK) == PENMOUNT_P2_TOUCHFLAG_TOUCH  ) \
+	                    || ((tag & PENMOUNT_P2_TOUCHFLAG_MASK) == PENMOUNT_P2_TOUCHFLAG_RELEASE))
 ////////////////////////////////////////////////////////
 int debug_level = 0;
 module_param_named(debug, debug_level, int, S_IWUSR | S_IWGRP | S_IRUSR | S_IRGRP | S_IROTH);
@@ -140,11 +142,12 @@ static void penmount_mtevent(struct penmount *penmount, struct input_dev *input)
 			input_event(input, EV_ABS, ABS_MT_POSITION_Y, penmount->slots[i].y);
 		}
 	}
-
+#if 0
 	input_mt_report_pointer_emulation(input, true);
+#endif
 	input_sync(input);
 }
-#else
+#endif
 //------------------------------------------------------
 static void penmount_input(struct penmount *penmount, struct input_dev *input) {
 	input_report_abs(input, ABS_X, penmount->slots[0].x);
@@ -152,7 +155,6 @@ static void penmount_input(struct penmount *penmount, struct input_dev *input) {
 	input_report_key(input, BTN_TOUCH, penmount->slots[0].active);
 	input_sync(input);
 }
-#endif
 ////////////////////////////////////////////////////////
 // IRQ Functions
 ////////////////////////////////////////////////////////
@@ -163,7 +165,7 @@ void penmount_i2c_do_read_work(struct work_struct *work) {
 	int rc = 0;
 	struct penmount_i2c *i2c = NULL;
 	struct penmount *penmount = NULL;
-	unsigned char buffer[64];
+	unsigned char buffer[64] = {0};
 
 	i2c = container_of(work, struct penmount_i2c, work);
 	penmount = i2c_get_clientdata(i2c->driver);
@@ -258,11 +260,11 @@ int penmount_i2c_write(struct i2c_client *client,
 
 	if (debug_level > 3) {
 		int i = 0;
-		printk ("[PENMOUNT] Write [0x%02X] (%d) : ", client->addr, length);
+		printk (KERN_INFO "[PENMOUNT] Write [0x%02X] (%d) : ", client->addr, length);
 		for (i=0; i<length; i++) {
-			printk ("[0x%02X]", buffer[i]);
+			printk (KERN_CONT "[0x%02X]", buffer[i]);
 		}
-		printk (" (%d)\n", ret);
+		printk (KERN_CONT " (%d)\n", ret);
 	}
 
 	return ret;
@@ -270,22 +272,36 @@ int penmount_i2c_write(struct i2c_client *client,
 //------------------------------------------------------
 int penmount_i2c_read(struct i2c_client *client,
 			int length,
-			unsigned char *buffer) {
+			unsigned char *pBuffer) {
 	struct penmount *penmount = NULL;
 	int rc = 0;
 	struct i2c_msg msg[1];
 	int i=0;
 	int retry = 0;
+	unsigned char *buffer = NULL;
+	unsigned char data_size = 0;
+	unsigned char data_index = 0;
 
 	penmount = i2c_get_clientdata(client);
 
-	memset (buffer, 0, length);
-
 	msg[0].addr = client->addr;
 	msg[0].flags = I2C_M_RD | I2C_M_IGNORE_NAK ; // Read
 
-	if ((penmount->i2c.read_length == 1)
-		||(penmount->i2c.sync_mode)) {
+	if (pBuffer == NULL) {
+		data_index = penmount->idx;
+		buffer = penmount->data;
+	} else {
+		data_index = 0;
+		buffer = pBuffer;
+	}
+	data_size = length - data_index;
+	buffer += data_index;
+
+	memset (buffer, 0, data_size);
+
+	// [1] Read until a valid first byte of packet is found
+	if ((penmount->idx == 0)
+	&& ((penmount->i2c.read_length == 1) || (penmount->i2c.sync_mode))) {
 		msg[0].len = 1;
 		// Retry until it reads the expected data as the first byte of report.
 		for(retry=0; retry<penmount->report_size*2; retry++) {
@@ -294,28 +310,37 @@ int penmount_i2c_read(struct i2c_client *client,
 				rc = -1;
 			}
 			if (debug_level > 4) {
-				printk ("[PENMOUNT] Sync Read [0x%02X] (%d) : [0x%02X] / [0x%02X]\n", client->addr, rc, buffer[0], penmount->CMD);
+				if (buffer[0] != PENMOUNT_P2_INVALID_DATA) {
+					printk (KERN_NOTICE "[PENMOUNT] Sync Read [0x%02X] (%d) : [0x%02X] / [0x%02X]\n", client->addr, rc, buffer[0], penmount->CMD);
+				}
 			}
-			if ( (penmount->CMD) && (buffer[0] == penmount->CMD) ) {
+			if ((penmount->CMD) && (buffer[0] == penmount->CMD)) {
+				data_index++;
 				break;
 			} else {
-				if (((buffer[0] & PENMOUNT_P2_TOUCHFLAG_MASK) == PENMOUNT_P2_TOUCHFLAG_TOUCH)
-					||((buffer[0] & PENMOUNT_P2_TOUCHFLAG_MASK) == PENMOUNT_P2_TOUCHFLAG_RELEASE)) {
+				if (IS_TOUCH_DATATAG(buffer[0])) {
+					data_index++;
 					break;
 				}
 			}
 		}
 		if (retry == penmount->report_size*2) {
-			if (debug_level > 4) {
-				printk ("[PENMOUNT] Sync Read Failed !\n");
-			}
-			return -1;
+			return -2;
 		}
 	}
 
+	// [2] Read the rest of packet
+	if (pBuffer == NULL) {
+		buffer = penmount->data;
+	} else {
+		buffer = pBuffer;
+	}
+	data_size = length - data_index;
+	buffer += data_index;
+
 	if (penmount->i2c.read_length == 1) {
 		msg[0].len = 1;
-		for(i=1; i<length; i++) {
+		for(i=0; i<data_size; i++) {
 			msg[0].buf = buffer+i;
 			if (i2c_transfer(client->adapter, msg, 1) <= 0) {
 				rc = -1;
@@ -323,26 +348,42 @@ int penmount_i2c_read(struct i2c_client *client,
 		}
 	} else {
 		if (penmount->i2c.sync_mode) {
-			msg[0].len = length-1;
-			msg[0].buf = buffer+1;
 			penmount->i2c.sync_mode = 0;
-		} else {
-			msg[0].len = length;
-			msg[0].buf = buffer;
 		}
+		msg[0].len = data_size;
+		msg[0].buf = buffer;
 		if (i2c_transfer(client->adapter, msg, 1) <= 0) {
 			rc = -1;
 		}
 	}
 
-	if (debug_level > 3) {
-		printk ("[PENMOUNT] Read (%d) :", rc);
-		for (i=0; i<length; i++)
-			printk ("[0x%02X]", buffer[i]);
-		printk ("\n");
+	if ((penmount->idx) || (debug_level > 3)) {
+		printk (KERN_INFO "[PENMOUNT] Read data %s : ", (rc >= 0)?"OK":"NG");
+		if (rc >= 0) {
+			if (pBuffer == NULL) {
+				for (i = 0; i < penmount->idx; i++) {
+					printk (KERN_CONT "(0x%02X)", penmount->data[i]);
+				}
+				for (i = penmount->idx; i < length; i++) {
+					printk (KERN_CONT "[0x%02X]", penmount->data[i]);
+				}			
+			} else {
+				for (i = 0; i < length; i++) {
+					printk (KERN_CONT "[0x%02X]", pBuffer[i]);
+				}
+			}
+		}
+		printk (KERN_CONT "\n");
 	}	
 
-	penmount->CMD = 0x00;
+	// [3] If read success, meaning we get a whole packet, reset idx value.
+	if (rc >= 0) {
+		if (pBuffer == NULL) {
+			penmount->idx = 0;
+		} else {
+			penmount->CMD = 0x00;
+		}
+	}
 
 	return rc;
 }
@@ -363,7 +404,20 @@ unsigned char penmount_get_buffer_checksum(unsigned char * buffer,
 static
 int penmount_i2c_check_report(unsigned char * buffer,
 				unsigned char length) {
-	return (buffer[length] == penmount_get_buffer_checksum(buffer, length));
+	if (buffer[length] != penmount_get_buffer_checksum(buffer, length)) {
+		return 0;
+	}
+
+	if (IS_TOUCH_DATATAG(buffer[0])) {
+		unsigned short X = 256 * buffer[2] + buffer[1];
+		unsigned short Y = 256 * buffer[4] + buffer[3];
+		if (X > PENMOUNT_P2_RESOLUTION) {
+			return 0;
+		} else if (Y > PENMOUNT_P2_RESOLUTION) {
+			return 0;
+		}
+	}
+	return 1;
 }
 ////////////////////////////////////////////////////////
 // PenMount Command Functions
@@ -387,7 +441,7 @@ int penmount_i2c_send_command(struct penmount *penmount,
 	
 		if (penmount_i2c_write(penmount->i2c.driver, length+1, buffer) < 0) {
 			if (debug_level)
-				printk ("[PENMOUNT] Send CMD failed !\n");
+				printk (KERN_ERR "[PENMOUNT] Send CMD failed !\n");
 			return -1;
 		}
 		// TODO: For commands that requires a little bit delay
@@ -413,12 +467,12 @@ int penmount_i2c_send_command(struct penmount *penmount,
 			ret = penmount_i2c_read(penmount->i2c.driver, length+1, buffer);
 			if (ret < 0) {
 				if (debug_level)
-					printk ("[PENMOUNT] Get ACK failed !\n");
+					printk (KERN_ERR "[PENMOUNT] Get ACK failed !\n");
 				return -1;
 			} else if (ret == 0) {
 				if (!penmount_i2c_check_report(buffer, length)) {
 					if (debug_level)
-						printk ("[PENMOUNT] Invalid ACK !\n");
+						printk (KERN_ERR "[PENMOUNT] Invalid ACK !\n");
 					return -1;
 				}
 				memcpy (ACK, buffer, length);
@@ -438,27 +492,25 @@ int penmount_i2c_flush_buffer(struct penmount *penmount) {
 	/* 
 		When there is no data, PenMount P2 returns 0xEE.
 	*/
-	if (debug_level)
-		printk ("[PENMOUNT] Flush read buffer ! [START]\n");
-	for (i=0 ; i<30; i++) {
+	if (debug_level > 1) printk (KERN_NOTICE "[PENMOUNT] Flush read buffer ! [START]\n");
+	for (i = 0; i < 30; i++) {
 		penmount->CMD = 0x00;
 		if (penmount_i2c_read(penmount->i2c.driver, sizeof(buffer), buffer) < 0) {
 			rc = -1;
 			break;
 		}
 
-		for (j=0; j<sizeof(buffer)-1; j++) {
+		for (j = 0; j < sizeof(buffer) - 1; j++) {
 			if (buffer[j] != buffer[j+1])
 				break;
 		}
 
 		if (j == sizeof(buffer)-1) {
-			printk ("[PENMOUNT] Flush read buffer ! [END]\n");
+			if (debug_level > 1) printk (KERN_NOTICE "[PENMOUNT] Flush read buffer ! [END]\n");
 			break;
 		}
 	}
-	if (debug_level)
-		printk ("[PENMOUNT] Flush read buffer ! [END]\n");
+	if (debug_level > 1) printk (KERN_NOTICE "[PENMOUNT] Flush read buffer ! [END]\n");
 
 	return rc;	
 }
@@ -472,7 +524,7 @@ int penmount_i2c_get_read_length(struct penmount *penmount) {
 		return -1;
 
 	if (ACK[2] & 0x10) {
-		printk ("[PENMOUNT] Device using burst read !\n");
+		printk (KERN_NOTICE "[PENMOUNT] Device using burst read !\n");
 		penmount->i2c.read_length = PENMOUNT_CMD_PACKET_SIZE;
 		return 0;
 	}
@@ -506,9 +558,9 @@ int penmount_i2c_get_version(struct penmount *penmount) {
 
 
 	if (ODMVer)
-		printk ("[PENMOUNT] PM%04d.D%02d.%d.%d.%d\n", Product, ODMVer, MajorVer, MinorVer, BuildVer);
+		printk (KERN_NOTICE "[PENMOUNT] PM%04d.D%02d.%d.%d.%d\n", Product, ODMVer, MajorVer, MinorVer, BuildVer);
 	else
-		printk ("[PENMOUNT] PM%04d.%d.%d.%d\n", Product, MajorVer, MinorVer, BuildVer);
+		printk (KERN_NOTICE "[PENMOUNT] PM%04d.%d.%d.%d\n", Product, MajorVer, MinorVer, BuildVer);
 
 	return 0;
 }
@@ -560,34 +612,70 @@ int penmount_i2c_init_device(struct penmount *penmount) {
 static int penmount_i2c_read_report(struct penmount *penmount, 
 		unsigned char * buffer)
 {
-	unsigned char tmpbuf[PENMOUNT_CMD_PACKET_SIZE] = { 0 };
-
-	if (penmount_i2c_read(penmount->i2c.driver, penmount->report_size, tmpbuf) < 0)
-	{
-		if (debug_level)
-			printk(KERN_ERR "[PENMOUNT] Failed on reading P2 data\n");
+	int rc = 0;
+	rc = penmount_i2c_read(penmount->i2c.driver, penmount->report_size, NULL);
+	if (rc < 0) {
+		if (rc == -2) {
+			if (debug_level > 1)
+				printk(KERN_NOTICE "[PENMOUNT] No more data to read !\n");
+		} else if (debug_level) {
+			printk(KERN_ERR "[PENMOUNT] Failed on reading P2 data !\n");
+		}
 		return -1;
 	}
 
 	// Check Packet Data
-	if ( ! penmount_i2c_check_report ( tmpbuf, penmount->report_size-1 ) ) {
-		penmount->i2c.sync_mode = 1;
-		if (debug_level > 2)
-			printk(KERN_ERR "[PENMOUNT] Invalid report data, start syncing !\n");
+	if (!penmount_i2c_check_report(penmount->data, penmount->report_size-1)) {
+		int i = 0;
+		for (i = 0; i < penmount->report_size; i++) {
+			if (penmount->data[i] != PENMOUNT_P2_INVALID_DATA) {
+				break;
+			}
+		}
+		if ((i < penmount->report_size) && (debug_level)) {
+			printk (KERN_ERR "[PENMOUNT] Invalid data : ");
+			for (i = 0; i < penmount->report_size; i++)
+				printk (KERN_CONT "[0x%02X]", penmount->data[i]);
+			printk (KERN_CONT "\n");
+		}
+
+		// Find a valid touch data as the new data index
+		for (penmount->idx = 1; penmount->idx < penmount->report_size; penmount->idx++) {
+			if (IS_TOUCH_DATATAG(penmount->data[penmount->idx])) {
+				// Adjust buffer
+				penmount->i2c.sync_mode = 0;
+				printk(KERN_NOTICE "[PENMOUNT] Adjust buffer: ");
+				for (i = 0; i < penmount->report_size - penmount->idx; i++) {
+					penmount->data[i] = penmount->data[penmount->idx+i];
+					printk(KERN_CONT "[0x%02X]", penmount->data[i]);
+				}
+				for (; i < penmount->report_size; i++) {
+					printk(KERN_CONT "(----)");
+				}
+				printk(KERN_CONT "\n");
+				penmount->idx = penmount->report_size - penmount->idx;
+				break;
+			}
+		}
+		// If cannot find a valid touch data
+		if (penmount->idx >= penmount->report_size) {
+			penmount->i2c.sync_mode = 1;
+			penmount->idx = 0;
+		} 
 		return -1;
 	}
 
-	if ( ( ( tmpbuf[0] & PENMOUNT_P2_TOUCHFLAG_MASK ) != PENMOUNT_P2_TOUCHFLAG_TOUCH)
-	&& ( ( tmpbuf[0] & PENMOUNT_P2_TOUCHFLAG_MASK ) != PENMOUNT_P2_TOUCHFLAG_RELEASE) ) {
+	// For a valid packet, check it's type.
+	if (IS_TOUCH_DATATAG(penmount->data[0])) {
+		memcpy(buffer, penmount->data, penmount->report_size);
+	} else {
 		if (debug_level)
 			printk(KERN_ERR "[PENMOUNT] Receive ACK of command !\n");
-		memcpy(penmount->ACK, tmpbuf, sizeof(penmount->ACK));
-		return 1;
+		memcpy(penmount->ACK, penmount->data, sizeof(penmount->ACK));
+		rc = 1;
 	}
 
-	memcpy(buffer, tmpbuf, penmount->report_size);
-
-	return 0;
+	return rc;
 }
 //------------------------------------------------------
 static void penmount_i2c_parse_report(struct penmount *penmount,
@@ -595,12 +683,12 @@ static void penmount_i2c_parse_report(struct penmount *penmount,
 {
 	unsigned char slotnum = 0;
 
-	if (debug_level) {
+	if (debug_level > 1) {
 		unsigned char i=0;
-		printk ("[PENMOUNT] Touch report : ");
+		printk (KERN_INFO "[PENMOUNT] Touch report : ");
 		for (i=0; i<penmount->report_size; i++)
-			printk ("[0x%02X]", buffer[i]);
-		printk ("\n");
+			printk (KERN_CONT "[0x%02X]", buffer[i]);
+		printk (KERN_CONT "\n");
 	}
 
 	// [TOUCH][X][X][Y][Y]
@@ -612,12 +700,15 @@ static void penmount_i2c_parse_report(struct penmount *penmount,
 	}
 
 #if (PENMOUNT_MTPROTO == PENMOUNT_MTPROTO_B)
-	if (slotnum < PENMOUNT_P2_MAX_CONTACT)
+	if (slotnum < PENMOUNT_P2_MAX_CONTACT) {
 		penmount_mtevent(penmount, penmount->touchdev);
-#else
-	if (!slotnum)
-		penmount_input(penmount, penmount->touchdev);
+	}
 #endif
+	// Also send single touch input events for finger #0.
+	if (slotnum == 0) {
+		penmount_input(penmount, penmount->touchdev); 
+	}
+
 	return;
 }
 ////////////////////////////////////////////////////////
@@ -697,7 +788,7 @@ int penmount_init_touch(struct penmount *penmount,
 
 	penmount->touchdev = input_allocate_device();
 	if (penmount->touchdev == NULL) {
-		printk ("[PENMOUNT] Failed to allocated input device !\n");
+		printk (KERN_ERR "[PENMOUNT] Failed to allocated input device !\n");
 		return -ENOMEM;
 	}
 
@@ -757,8 +848,7 @@ int penmount_i2c_init_gpio(struct i2c_client *client) {
 	penmount = i2c_get_clientdata(client);
 	/* Initialize gpio and interrupt pins */
 	ret = gpio_request(penmount->i2c.gpio_irq, PENMOUNT_I2C_GPIO_NAME);
-	if (ret < 0)
-	{
+	if (ret < 0) {
 		return -1;
 	}
 
@@ -778,7 +868,7 @@ int penmount_i2c_init_irq(struct i2c_client *client) {
 	penmount = i2c_get_clientdata(client);
 
 	if (client->irq) {
-		printk(KERN_ERR "[PENMOUNT] irq already specified !!\n");
+		printk(KERN_NOTICE "[PENMOUNT] irq already specified !!\n");
 		return 0;
 	}	
 
@@ -829,11 +919,10 @@ static void penmount_i2c_late_resume(struct early_suspend *handler)
 	struct penmount *penmount = NULL;
 	penmount = container_of(handler, struct penmount, early_suspend);
 
-	printk ("[PENMOUNT] System late resume !!\n");
+	printk (KERN_INFO "[PENMOUNT] System late resume !!\n");
 
 #if PENMOUNT_USE_IRQ
-	if (penmount->i2c.driver->irq)
-	{
+	if (penmount->i2c.driver->irq) {
 		struct i2c_client *client = penmount->i2c.driver;
 		if (client != NULL) {
 			// Reset base signal
@@ -865,7 +954,7 @@ int penmount_i2c_probe(struct i2c_client *client,
 
 	penmount = penmount_init_context ();
 	if (penmount == NULL) {
-		printk ("[PENMOUNT] Failed to allocated device context !\n");
+		printk (KERN_ERR "[PENMOUNT] Failed to allocated device context !\n");
 		return -ENOMEM;
 	}
 
@@ -881,7 +970,7 @@ int penmount_i2c_probe(struct i2c_client *client,
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 30)
 		ret = devm_request_threaded_irq(&client->dev, client->irq, NULL, penmount_i2c_interrupt, IRQF_ONESHOT | IRQF_TRIGGER_LOW, client->name, client);
 #endif
-		printk ("[PENMOUNT] Using IRQ %d\n", client->irq);
+		printk (KERN_INFO "[PENMOUNT] Using IRQ %d\n", client->irq);
 	} else
 #endif
 	{
@@ -955,7 +1044,7 @@ int penmount_i2c_detect(struct i2c_client *client,
 static
 int __init penmount_init(void)
 {
-	printk ("[PENMOUNT] Loading %s V%d.%d.%d\n", PENMOUNT_I2C_DRIVERNAME, PMDRIVER_MAJORVER, PMDRIVER_MINORVER, PMDRIVER_BUILDVER);
+	printk (KERN_INFO "[PENMOUNT] Loading %s V%d.%d.%d (Rev%d)\n", PENMOUNT_I2C_DRIVERNAME, PMDRIVER_MAJORVER, PMDRIVER_MINORVER, PMDRIVER_BUILDVER, PMDRIVER_REVISION);
 
 	return i2c_add_driver(&PENMOUNT_I2C_DRIVER);
 }
@@ -979,3 +1068,5 @@ void __exit penmount_exit(void)
 #endif
 ////////////////////////////////////////////////////////
 
+
+
-- 
1.9.1

